11/07/25:
---------

Home Work:
----------
01. Difference between VM vs Container?
02. What is Hypervisior?
03. What is Baremetal?
04. Baremetal vs VM vs Container?


Docker Installation Commands on RHEL:
--------------------------------------
- Set up the repository:
    sudo dnf -y install dnf-plugins-core
    sudo dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo

- Install Docker Engine:
    Install the Docker packages:
        - sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    - Above command installs Docker, but it doesn't start Docker. It also creates a docker group, however, it doesn't add any users to the group by default.
        - sudo systemctl start docker
        - sudo systemctl enable --now docker / sudo systemctl enable docker
        - sudo systemctl status docker

- Add user to docker group
    - sudo usermod -aG docker ec2-user
    - Restart system 


14/07/2025:
-----------

Docker commands:
----------------
- docker ps -> To list running containers
- docker images -> To list images in the system
- docker pull <image-name>:<tag/version> -> To download/get the image
- docker create nginx:latest -> To create a container
- docker ps -a -> To list all containers including all status
- docker start <container_id_of_nginx> -> To start docker
- docker rm  -f <container_id> -> To remove container
- docker rmi <image_name> -> To remove image
- docker run nginx:latets -> To pull image, Create container and Start Docker -> It runs foreground
- docker run -d ngnix:latest -> To pull image, Create container and Start Docker -> To detach the screen

To access nginx:
    - docker run -d -p <host_port>:<container_port> ngnix
        - host port can not duplicate. It should be unique
        - Container Port can be duplicated, Each container will 0-65535 ports
    - docker run -d -p 80:80 ngnix -> Create ngnix container and we can access
    - docker run -d -p 8080:80 ngnix -> Creates one more container
    - docker ps -a -q -> To list all container ID's
    - docker rm -f `pa -a -q` -> To remove all containers

    - docker run -d -p 80:80 --name ngnix nginx -> To Create ngnix container with name nginx and we can access
        - With same name we cannot create one more container
    - docker exec -it <container_name/container_id> bash -> To login into container
    - docker inspect <container_name/container_id> -> To check the container information like IP, Ports etc
    - docker logs <container_name/container_id> -> To check logs

Docker Registry:
----------------
- This is central repo for storing images


How to create a Custom Image to your application?
-------------------------------------------------
- With the help of docker file we can create a custom image
- Dockerfile
    -  A set of instructions to create a customized image

FROM
====
FROM alamalinux:9
- This is the first instruction in docker file

Build
=====
docker build -t from:v1 . -> To build the image in a current directory using docker file
    - From is the name
    - v1 is the tag
    - . is the current path

RUN
===
RUN commands

- RUN instructions configure the image like installing packages, doing some configurations, etc..
- RUN executes at the time of image creation

CMD 
===
- CMD executes at the time of container creation i.e at the time of docker run. 
- There should be only one CMD instruction inside Dockerfile

CMD ["param1","param2"]

COPY
====
- copies the code from local to 

ADD 
===
- COPY and ADD both copies the code from local to container. But it has two more advantages
1. It can directly fetch the file from internet
2. It can directly untar the file into container



15/07/2025:
-----------

- var/lib/docker -> docker home directory

LABEL
======
- These is used for documentation purose just like tags


Docker Commands:
----------------
- docker images --filter "label=COURSE=Devops"
- docker push docker.io/<username>/<name>:<tag> -> To push image into docker hub
- docker push <url>/<username>/<image_name>:<version> - To push into some other repository

- docker login -u <username>
- docker tag <image_name>:<version> <username>/<image_name>:<version> -> Before pushing you have to do re-tag
- docker push <image_name>:<version> -> Now it will be pushed to docker hub

- docker ps -a --no-trunc -> To show full messages
- docker run <name>:<label> <cmd line value> -> used to ping or provide values

MAINTAINER (Deprecated)
==========
- Used this filed in LABEL only

EXPOSE
=======
- used for documentation purpose
- Like to let you know port numbers, protocols etc.

ENV
===
- The ENV instruction sets the environment variable <key> to the value <value>
- Used to set env variables

ENTRYPOINT
==========
- CMD instruction can be overriden 
- We cannot overwrite entry point. If we try. it will over ride and will throw an error.
- We can use combination of CMD and ENTRYPOINT for better results
- We can use ENTRYPOINT as key and CMD can be used as value
- For CMD - we can overide values through command line

USER 
====
- To restrict use of root user
- To create an user and run the commands through user

WORKDIR
=======
- To set a dir where to run commands

ARG
===
- It is an build time variables
- We can not access inside container
- ENV we can access inside container as well for variables purpose
- ARG can be overriden during buid process using --build-arg trainer=sive
- ENV values cannot overriden during build process
- ARG can be given first instruction in Dockerfile
- In exceptional case ARG cab be used to supply version to FROM instruction through run time
- How can you use ARG inside container as well?
    ARG trainer="sivalumar"
    ENV tranier=$(trainer)

ONBUILD
=======
- While developing images we can put some conditions to use other people as base image or not



16/07/2025
----------
- docker build -t mongodb:v1 . -> To build image
- docker run -d --name mongodb mongodb:v1 - To create a container
    - - Here were not exposing monodb to user. so port specification is not required

- docker build -t catalogue:v1 . -> To build image
- docker run -d --name catalogue catalogue:v1 - To create a container
    - Here were not exposing catalogue to user. so port specification is not required
    - - curl localhost:8080/health -> To check connection

- docker network
- docker network ls 

- docker have 2 types of network: 
    - bridge and host 
        - host means directly host network. 
        - bridge means docker creates seperate network interface and assign the IP address to containers.

    - docker uses default bridge network can't communicate between containers, docker always suggest to create custom bridge network
    - docker uses bridge networking by default
    - If you use bridge network - container will not communicate over each other even if containers are in same network

- docker network create <name-of-network> 

- docker network disconnect bridge catalogue
- docker network disconnect bridge mongodb

- docker network connect roboshop catalogue
- docker network connect roboshop mongodb


- docker build -t user:v1 . -> To build image
- docker run -d --name user --network roboshop user:v1 - To create a container
    - Here were not exposing user component to user. so port specification is not required
    - curl localhost:8080/health -> To check connection

- docker build -t cart:v1 . -> To build image
- docker run -d --name cart --network roboshop cart:v1 - To create a container
    - Here were not exposing cart component to user. so port specification is not required
    - curl localhost:8080/health -> To check connection

- docker build -t mysql:v1 . -> To build image
- docker run -d --name mysql --network roboshop mysql:v1 - To create a container
    - Here were not exposing mysql component to user. so port specification is not required

- Here in redis we are not loading any data 
- So directly we can pull image or run container
    - docker run -d --name redis --network roboshop redis:7
- This image comes directly from docker hub

- docker build -t shipping:v1 . -> To build image
- docker run -d --name shipping --network roboshop shipping:v1 - To create a container
    - Here were not exposing shipping component to user. so port specification is not required







